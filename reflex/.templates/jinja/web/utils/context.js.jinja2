import { createContext, useState } from "react"
import { applyDelta, Event, hydrateClientStorage, useEventLoop } from "/utils/state.js"

{% if initial_state %}
export const initialState = {{ initial_state|json_dumps }}
{% else %}
export const initialState = {}
{% endif %}

export const ColorModeContext = createContext(null);
export const StateContext = createContext(null);
export const EventLoopContext = createContext(null);
{% if client_storage %}
export const clientStorage = {{ client_storage|json_dumps }}
{% else %}
export const clientStorage = {}
{% endif %}

{% if state_name %}
export const initialEvents = () => [
    Event('{{state_name}}.{{const.hydrate}}', hydrateClientStorage(clientStorage)),
]
{% else %}
export const initialEvents = () => []
{% endif %}

export const isDevMode = {{ is_dev_mode|json_dumps }}

function EventLoopProvider({ dispatch, children }) {
  const [Event, connectError] = useEventLoop(
    dispatch,
    initialEvents,
    clientStorage,
  )
  return (
    <EventLoopContext.Provider value={[Event, connectError]}>
      {children}
    </EventLoopContext.Provider>
  )
}

function StateProvider({ children }) {
  const [state, dispatch] = useReducer(applyDelta, initialState)

  return (
    <StateContext.Provider value={state}>
      <EventLoopProvider dispatch={dispatch}>
        {children}
      </EventLoopProvider>
    </StateContext.Provider>
  )
}
