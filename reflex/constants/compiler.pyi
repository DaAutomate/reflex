"""Stub file for reflex/constants/compiler.py"""
# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------

from typing import Any, Dict, Literal, Optional, Union, overload
from reflex.vars import Var, BaseVar, ComputedVar
from reflex.event import EventChain, EventHandler, EventSpec
from reflex.style import Style
import enum
from enum import Enum
from types import SimpleNamespace
from reflex.base import Base
from reflex.constants import Dirs
from reflex.utils.imports import ImportVar

SETTER_PREFIX = "set_"
NOCOMPILE_FILE = ".web/nocompile"

class Ext(SimpleNamespace):
    JS = ".js"
    PY = ".py"
    CSS = ".css"
    ZIP = ".zip"
    EXE = ".exe"

class CompileVars(SimpleNamespace):
    APP = "app"
    API = "api"
    ROUTER = "router"
    SOCKET = "socket"
    RESULT = "result"
    FINAL = "final"
    PROCESSING = "processing"
    STATE = "state"
    EVENTS = "events"
    HYDRATE = "hydrate"
    IS_HYDRATED = "is_hydrated"
    ADD_EVENTS = "addEvents"
    CONNECT_ERROR = "connectErrors"
    TO_EVENT = "Event"
    ON_LOAD_INTERNAL = "on_load_internal_state.on_load_internal"
    UPDATE_VARS_INTERNAL = "update_vars_internal_state.update_vars_internal"

class PageNames(SimpleNamespace):
    INDEX_ROUTE = "index"
    APP_ROOT = "_app"
    STYLESHEET_ROOT = "styles"
    DOCUMENT_ROOT = "_document"
    THEME = "theme"
    STATEFUL_COMPONENTS = "stateful_components"

class ComponentName(Enum):
    BACKEND = "Backend"
    FRONTEND = "Frontend"

    def zip(self): ...

class Imports(SimpleNamespace):
    EVENTS = {
        "react": [ImportVar(tag="useContext")],
        f"/{Dirs.CONTEXTS_PATH}": [ImportVar(tag="EventLoopContext")],
        f"/{Dirs.STATE_PATH}": [ImportVar(tag=CompileVars.TO_EVENT)],
    }

class Hooks(SimpleNamespace):
    EVENTS = f"const [{CompileVars.ADD_EVENTS}, {CompileVars.CONNECT_ERROR}] = useContext(EventLoopContext);"
    AUTOFOCUS = "\n                // Set focus to the specified element.\n                const focusRef = useRef(null)\n                useEffect(() => {\n                  if (focusRef.current) {\n                    focusRef.current.focus();\n                  }\n                })"

class MemoizationDisposition(enum.Enum):
    STATEFUL = "stateful"
    ALWAYS = "always"
    NEVER = "never"

class MemoizationMode(Base):
    disposition: MemoizationDisposition
    recursive: bool
