"""The pyi generator module."""

import importlib
import inspect
import os
from inspect import getfullargspec
from pathlib import Path
from typing import Any

import black

from reflex.components.component import Component


def _get_type_hint(value):
    res = ""
    if hasattr(value, "_name") and value._name == "Optional":
        res = value.__args__[0].__name__
    elif isinstance(value, str):
        res = value
    else:
        res = value.__name__
    return res


class PyiGenerator:
    """A .pyi file generator that will scan all defined Component in Reflex and
    generate the approriate stub.
    """

    modules: list = []
    root: str = ""
    current_module: Any = {}

    def _generate_imports(self, classes):
        bases = {
            base
            for _, _class in classes
            for base in _class.__bases__
            if inspect.getmodule(base) != self.current_module
        }
        return [
            "from typing import overload, Optional, Any",
            *[f"from {base.__module__} import {base.__name__}" for base in bases],
            "from reflex.vars import Var",
        ]

    def _generate_pyi_class(self, _class):
        create_spec = getfullargspec(_class.create)
        lines = [
            "",
            f"class {_class.__name__}({', '.join([base.__name__ for base in _class.__bases__])}):",
        ]
        definition = f"    @overload\n    @classmethod\n    def create(cls, *children, "

        for kwarg in create_spec.kwonlyargs:
            if kwarg in create_spec.annotations:
                definition += (
                    f"{kwarg}: {_get_type_hint(create_spec.annotations[kwarg])}, "
                )
            else:
                definition += f"{kwarg}, "

        for name, value in _class.__annotations__.items():
            if name in create_spec.kwonlyargs:
                continue
            definition += f"{name}: {_get_type_hint(value)}, "

        definition = definition.rstrip(", ")
        definition += f", **props) -> '{_class.__name__}': ... # type: ignore"

        lines.append(definition)
        return lines

    def _write_pyi_file(self, classes):
        pyi_content = [
            f'"""Stub file for {self.current_module_path}.py"""',
            "# ------------------- DO NOT EDIT ----------------------",
            "# This file was generated by `scripts/pyi_generator.py`!",
            "# ------------------------------------------------------",
            "",
        ]
        pyi_content.extend(self._generate_imports(classes))

        for _, _class in classes:
            pyi_content.extend(self._generate_pyi_class(_class))

        pyi_filename = f"{self.current_module_path}.pyi"
        pyi_path = os.path.join(self.root, pyi_filename)

        with open(pyi_path, "w") as pyi_file:
            pyi_file.write("\n".join(pyi_content))
        black.format_file_in_place(
            src=Path(pyi_path),
            fast=True,
            mode=black.FileMode(),
            write_back=black.WriteBack.YES,
        )

    def for_folders(self, folders):
        """Scan all subfolders for the given folders list and generate the .pyi files.

        Args:
            folders: the list of folders to scan.
        """
        for folder in folders:
            for root, _, files in os.walk(folder):
                self.root = root
                for file in files:
                    if file in [
                        "__init__.py",
                        "component.py",
                        "bare.py",
                        "foreach.py",
                        "cond.py",
                    ]:
                        continue
                    if file.endswith(".py"):
                        self.current_module_path = os.path.splitext(file)[0]
                        module_import = os.path.splitext(os.path.join(root, file))[
                            0
                        ].replace("/", ".")

                        self.current_module = importlib.import_module(module_import)

                        class_names = [
                            (name, obj)
                            for name, obj in vars(self.current_module).items()
                            if inspect.isclass(obj)
                            and issubclass(obj, Component)
                            and obj != Component
                            and inspect.getmodule(obj) == self.current_module
                        ]
                        if not class_names:
                            continue
                        print(f"Parsed {file}: Found {[n for n,_ in class_names]}")
                        self._write_pyi_file(class_names)


if __name__ == "__main__":
    target_folders = ["reflex/components"]
    print(f"Running .pyi generator for {target_folders}")
    gen = PyiGenerator()
    gen.for_folders(target_folders)
